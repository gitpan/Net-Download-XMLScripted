.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Net::Download::XMLScripted::XMLScripted 3"
.TH Net::Download::XMLScripted::XMLScripted 3 "2006-07-03" "perl v5.8.6" "User Contributed Perl Documentation"
.SH "NAME"
Net::Download::XMLScripted::XMLScripted \- Perl XML scripted download program
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Net::Download::XMLScripted::XMLScripted;
.Ve
.PP
.Vb 1
\&  To Run from Command Line:
.Ve
.PP
.Vb 1
\&  (1) perl XMLScripted.pm -inXMLFileName xmlFileName [-verbose]
.Ve
.PP
.Vb 1
\&  (2) perl XMLScripted.pm -inXMLFileName xmlFileName -beginDate YYYY-MM-DD [-endDate YYYY-MM-DD]
.Ve
.PP
.Vb 1
\&  (3) perl XMLScripted.pm -generateSampleXMLFile sampleXMLFileName
.Ve
.PP
.Vb 1
\&  (4) perl XMLScripted.pm -showTranslationRules
.Ve
.PP
.Vb 1
\&  (5) perl XMLScripted.pm -version
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a daily download program. The input is an \s-1XML\s0 file that has information
about URLs that need to be downloaded. It uses specific translation rules to
generate \s-1URL\s0 names that contain dates. It creates directories specified in
the input \s-1XML\s0 file and downloads the URLs. This module is ideal for cron jobs.
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1) LWP::UserAgent HTTP::Request HTTP::Response URI::Heuristic XML::Parser
.SH "AUTHOR"
.IX Header "AUTHOR"
Singh T. Junior, <tsingh@gmail.com<gt>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2006 by Singh T. Junior      
.PP
All Rights Reserved.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.6 or,
at your option, any later version of Perl 5 you may have available.
.RE
.IP "sub \fIgetTranslationRules()\fR"
.IX Item "sub getTranslationRules()"
The function \fIgetTranslationRules()\fR return a string that contains translation grammar.
.RE
.IP "sub \fIcreateTranslationHash()\fR"
.IX Item "sub createTranslationHash()"
The function \fIcreateTranslationHash()\fR generates the hash that contains the translation rules.
It's input argument is an Epoch Time variable. 
.PP
Example: \f(CW$cio\fR\->createTranslationHash(time);
.RE
.IP "sub \fIdownload()\fR"
.IX Item "sub download()"
The function \fIdowload()\fR performs the download operations. This includes creation of required directories.
.RE
.IP "sub \fIgetFullDirectoryName()\fR"
.IX Item "sub getFullDirectoryName()"
This function returns full Directory name given a main path and a subdirectory.
.RE
.IP "sub \fIwriteStatusReport()\fR"
.IX Item "sub writeStatusReport()"
This function creates status report in the download directory.
.RE
.IP "sub \fIgetOperatingSystem()\fR"
.IX Item "sub getOperatingSystem()"
The \fIgetOperatingSystem()\fR function returns the type of Operating System.
.RE
.IP "sub \fIprintUsage()\fR"
.IX Item "sub printUsage()"
This program prints the usage of mainXMLScripted.
.RE
.IP "sub \fIgetVersion()\fR"
.IX Item "sub getVersion()"
Returns current version of the program.
.RE
.IP "sub \fIgenerateSampleXMLFile()\fR"
.IX Item "sub generateSampleXMLFile()"
Generates sample \s-1XML\s0 file that can be modified and used as input.
.RE
.IP "sub \fIrunEngine()\fR"
.IX Item "sub runEngine()"
This routine is responsible for performing the actual task. It's arguments are 
input xmlFileName, beginDate, and endDate. The format of date is \s-1YYYY\-MM\-DD\s0. 
Ex: runEngine(\*(L"/tmp/input.xml\*(R", \*(L"2007\-07\-04\*(R", \*(L"2007\-07\-04\*(R");
.RE
.IP "sub \fIrun()\fR"
.IX Item "sub run()"
This routine is called by the instance of the XMLScripted object and it
runs the program.
.IP "* # Create XMLScripted Object" 4
.IX Item "# Create XMLScripted Object"
.PD 0
.ie n .IP "* my $cio\fR = Net::Download::XMLScripted::XMLScripted::\->\fInew();" 4
.el .IP "* my \f(CW$cio\fR = Net::Download::XMLScripted::XMLScripted::\->\fInew()\fR;" 4
.IX Item "my $cio = Net::Download::XMLScripted::XMLScripted::->new();"
.IP "* # Run it" 4
.IX Item "# Run it"
.ie n .IP "* $cio\fR\->\fIrun();" 4
.el .IP "* \f(CW$cio\fR\->\fIrun()\fR;" 4
.IX Item "$cio->run();"
